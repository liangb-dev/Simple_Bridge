#!/usr/bin/env python
import sys
import socket
import time
import threading
import string
import getpass
import argparse
import struct
import binascii

"""
Program: Bridge 
Arguments: bridge ID, arbitrary number of ports (int) (which also correspond to the
wires to be used)
usage: bridge <mac> <port1> <port2> ...
Description: Receives and sends BPDU messages across wires. Keep a table record of
             certain values from the received BPDU messages. 

===================================================================================
"""



"""
method: parseargs
Creates an object that takes in a mac address of format 'll:ll:ll:ll:ll:ll'
as well as an arbitrary number of ports numbers that also correspond to wire
numbers
"""
def parseargs():
    global args
    #Create ArgumentParser object
    parser = argparse.ArgumentParser(description='Bridge - recv/send BPDU')
    #Add argument option for
    parser.add_argument('ID', metavar = 'll:ll:ll:ll:ll:ll', type=str, nargs=1, help='Birgde ID')
    #Add argument option for arbitrary number of ports (int)
    parser.add_argument('ports', metavar='W', type=int, help='port/wire numbers', nargs="+")
    #Add argument option for '--silent'
    parser.add_argument('--silent', action='store_true',help='receive only, no transmit')
    #Assign values to variable 'args'
    args = parser.parse_args()


"""
method: ether_aton
'Replaces' all '-' for ':' in the argument, 
then convert all hex to decimal integers representation, 
then 'packs' each individual element and 'reduces' the array into a sum of elements
returns: sum
"""
def ether_aton(a):
    a = a.replace('-',':')
    b = map(lambda x: int(x,16), a.split(':')) #all numbers from hex to decimal
    return reduce(lambda x,y: x+y, map(lambda x: struct.pack('B', x), b))

"""
method: ether_ntoa
'Unpacks' each individual element and converts to 2 decimal places, 
then 'join' them into a string
returns: the string
"""
def ether_ntoa(n):
    return string.join(map(lambda x: "%02x" % x, struct.unpack('6B', n)), ':')

"""
method: dtoh(n)
Returns the hexadecimal format of an Integer 'n' as an 'int' (as opposed to 'str')  
Padded to four numbers, i.e. 0x0014
"""
def dtoh(n):
    return int("{0:#0{1}x}".format(n,n),16)

"""
method: htod(n)
Returns the decimal format of a hexidecimal
TWIST however is the arg is not the full hex, only the tail, i.e. 0014 (0x0014)
"""
def htod(n):
    return int("0x" + str(n),0)


 
"""
method: compare_bpdu(b1, b2)
Basic: Compares and returns whether b1 is better than b2
B: lower root mac adress is better
c: lower root cost is better
R: lower root port is better
p: lower receiving port is better 
"""    
def compare_bpdu(b1, b2) :
    return ((b1.B < b2.B) or
    ((b1.B==b2.B) and (b1.c<b2.c)) or
    ((b1.B==b2.B) and (b1.c==b2.c) and (b1.R<b2.R)) or
    ((b1.B==b2.B) and (b1.c==b2.c) and (b1.R==b2.R)
    and (b1.p<b2.p)))


"""
Method: receive(s, bridge)
Within an never ending While-loop, always listen for packages. 
If package is received:
Unpacks 'dst', 'src', and 'root_mac' from package.
Extracts the BPDU relevant values and updates the vector in bridge.V[] that
corresponds to that port
"""
def receive(s, bridge):
    while True:
        dgram = s.recv(1500)
        if not dgram:
            print 'lost connection'
            sys.exit(1)
        
        
        bpdu = new_package(bridge, dgram) 
                                #update bridge with info from new vector 
        
        rcv_port = bpdu.p
        src = bpdu.T
        dst = bpdu.D        


        spt_value_update(bridge) #update values according to spanning tree protocol

        bridge.receive_packet(bpdu, s) 
                                #update fwrd table, drop/forward/broadcast
                                
"""
method: new_package()
Extract information from the dgram and update bridge.V[] with a new vector
Returns: receiving port
"""
def new_package(bridge, dgram):
    dst, src, root_mac = struct.unpack('6s 6s 6s', dgram[0:18])
    print 'received dgram from %s to %s:' % (ether_ntoa(src), ether_ntoa(dst))

    result = string.join(map\
        (lambda x: '%02x' % ord(x), buffer(dgram)[:]), ' ').split()

    v = Vector(None, None, None, None, None)
    v.D = ether_ntoa(dst)
    v.B = ether_ntoa(root_mac)
    v.R = htod(string.join(result[18:20],''))
    v.c = htod(string.join(result[20:22],''))
    v.T = ether_ntoa(src)
    v.p = htod(string.join(result[22:24],''))
    v.age = 0

    bridge.V[bridge.get_index(v.p)] = v    #Update vector in bridge.V[port]
    
    return v

"""
method: spt_value_update()
When you receive BPDU on port i, you first update per-port vector\
V[i] = <B,R,c,T,p,age.
If V[i] is better than current bridge BPDU:
    a) set bridge BPDU to V[i]
    b) port i becomes Root port
    c) all ports j where V[j] is worse than BPDU become 'Designated'
    d) all other ports become 'Blocked'
When you change a port to 'Root' or 'Designated' you set its forwarding state to \
'Listening' and its timer to 15s. 
When you change a port to 'Blocked' you set the timer to 0s. 
When a port fires in 'Listening' state you set it to 15s and change to 'Learning'.
When a port fires in 'Learning' state you set it to 0s and change to 'Forwarding'. 
"""
def spt_value_update(bridge):
    for v in bridge.V:
        port_index = bridge.get_index(v.p) #ports[port_index] = port_num
        if (compare_bpdu(v, bridge.best_bpdu)):
            #Update bridge values
            bridge.best_bpdu = v
            bridge.root_port = v.p
            bridge.root_cost = v.c
            bridge.port_logical[port_index] = 'Root'
            bridge.port_fwrd[port_index] = 'Listening'
            bridge.V[port_index].age = 15 #set timer to 15s
            
            #Update best_bpdu according to current bridge
            bridge.best_bpdu.c += 100 #+100 for each hop
            bridge.best_bpdu.T = bridge.my_mac #current bridge will new src bridge
            
        else:
            bridge.port_logical[port_index] = 'Designated'
            bridge.port_fwrd[port_index] = 'Listening'
            #TODO: when do "all other ports become 'Blocked'" and "timer to 0s"?

            #TODO: When a port fires in 'Listening': 
            #       set timer to 15s and change to 'Learning'
            #TODO: When a port fires in 'Learning':
            #       set timer to 0s and change to 'Forwarding'


    
"""
Vector Class
"""
class Vector(object):
    def __init__(self, B, R, c, T, p, age=0, D=""):
        self.D = D # Destination mac address
        self.B = B # root bridge mac address
        self.R = R; # root port identifier from last received BPDU
        self.c = c; # root cost from last BPDU
        self.T = T; # the switch that sent the last received BPDU
        self.p = p; # port ID on sending switch
        self.age = age; # age of message

    #print out the vector values in order in array
    def v_print(self):
        vector = [self.D, self.B, self.R, self.c, self.T, self.p, self.age]
        print vector

    
"""
Bridge Class
"""
class Bridge(object):
    def __init__(self, my_mac, ports):
        self.my_mac = my_mac #Constant
        self.root_port = 0
        self.root_cost = 0
        self.my_bpdu = Vector(\
            self.my_mac,self.root_port,self.root_cost,self.my_mac,None) #Constant    
        self.port_nums = []
        self.port_logical = []
        self.port_fwrd = []
        self.V = []
        self.timer = []
        
        self.bpdus = []
        self.best_bpdu = self.my_bpdu
        self.fwrd_table = {}

        #Initialize all ports
        for c in ports:
            self.port_nums.append(c) #port_numbers
            self.port_logical.append("Designated") #default logical states
            self.port_fwrd.append("Listening") #default forwarding states

        #Initialize forwarding table
        for c in ports:
            self.fwrd_table[c] = ["", 0] #port_num -> [MAC,timer]
        #TODO: remove entry from the table if >15s

        #Initialize the vectors
        for i in range(len(self.port_nums)):
            self.V.append(self.my_bpdu) #default bpdu at first
            self.V[i].p = ports[i] #except with different port_num values
        
        

    """
    method: receive_packet(rcv_port, src_mac, dst_mac)
    Update forwarding table and decide whether to drop/forward/broadcast packet
    """
    def receive_packet(self, bpdu, s):
        recv_port = bpdu.p
        src_mac = bpdu.T
        dst_mac = bpdu.D
        if (self.get_fwrd(recv_port) != 'Learning'
            or self.get_fwrd(recv_port) != 'Forwarding'):
            pass #TODO:DROP IT
        else:
            self.update_table(src_mac,rcv_port)    #update forwarding table
            if (self.get_fwrd(rcv_port) == "Forwarding"):
                if (dst_mac == "01:80:c2:00:00:00"):
                    pass #TODO: DROP IT
                else:
                    #inherently checks if 'mac' in forwarding table thru 'mtop(dst)'
                    if (self.get_fwrd(self.mtop(dst_mac)) == "Forwarding"):
                        self.send_on_port(self.mtop(dst_mac), bpdu, s) 
                                                #Foward to corresponding portnum
                    else:
                        self.broadcast_bpdu(dst_mac, rcv_port, bpdu, s)
                                                 #broadcast to all ports


    """ Send given bpdu on specific port """
    def send_on_port(self, portnum, bpdu, s): 
        if (self.get_fwrd(portnum) == "Forwarding"):
                
            pkt = struct.pack('!6s 6s 6s H H H',\
                                 bpdu.D, bpdu.T, bpdu.B, bpdu.R, bpdu.c, bpdu.p)
            if len(pkt) < 60:
                pkt = pkt + '\0' * (60-len(pkt))
            
            s.send(pkt)
        else:
            pass
            

    """Broadcast given bpdu"""    
    def broadcast_bpdu(self, dst_mac, rcv_port, bpdu, s):
        for c in self.port_nums: 
                if (c != rcv_port):
                    self.send_on_port(c, bpdu, s) 


                    
    """ update the forwarding table """
    def update_table(self, portnum, mac):
        self.fwrd_table.update({portnum:[mac, 15]}) 

    """ check to see if destination is in forwarding table """
    def check_table(self, mac):
        for arr in self.fwrd_table.values():
            if (arr[0] == mac):
                return True
        return False

 
    """ Get port given mac
        BUT returns 'None' if mac can't be found """
    def mtop(self, mac):
        return next((k for k, v in self.fwrd_table.items() if v[0] == mac), None)

    """ Get port index """
    def get_index(self, portnum):
        return self.port_nums.index(portnum)
    """ Get port logical status """
    def get_logical(self, portnum):
        return self.port_logical[self.get_index(portnum)]
    """ Get port forwarding status """
    def get_fwrd(self, portnum):
        if (portnum == None):
            return False
        return self.port_fwrd[self.get_index(portnum)]


if __name__ == '__main__':
    parseargs()
    
    myID = ether_aton(args.ID[0])
    ports = args.ports
    bridge = Bridge(myID, ports)
    
    dst = ether_aton("99:99:99:99:99:99")

    print "Bridge ID: ", ether_ntoa(myID)
    print "Ports: ", bridge.port_nums
    print "Number of ports: ",len(ports)

    for wirenum in bridge.port_nums: #Do for every port 
        
        B = bridge.best_bpdu.B #root mac address
        R = dtoh(bridge.best_bpdu.R) #root port in hex
        c = dtoh(bridge.best_bpdu.c) #root cost in hex
        T = bridge.my_mac #source mac
        p = dtoh(wirenum) #port number in hex - wirenum


        s = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
        s.bind('\0%s.host-%s (wire %d)' % (getpass.getuser(), ether_ntoa(bridge.my_mac), wirenum))    
        if s.connect_ex('\0%s.wire.%d' % (getpass.getuser(), wirenum)):
            print 'connection error'
            sys.exit(1)
    
        t = threading.Thread(target=receive, args=[s, bridge])
        t.daemon = True     #so ^C works
        t.start()
        
    
        pkt = struct.pack('!6s 6s 6s H H H', dst, T, B, R, c, p)
        if len(pkt) < 60:
            pkt = pkt + '\0' * (60-len(pkt))
        
        while True: #TODO: I forgot what conclusion was but we discussed this one
            time.sleep(3)
            if not args.silent:
                s.send(pkt)
        

